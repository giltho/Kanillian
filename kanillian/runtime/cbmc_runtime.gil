#internal

proc i__cbmc_binop_cmpl_le(v1, v2) {
        goto [ l-nth(v1, 0i) = "long" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "long" ] blon unde;
  blon: ret := l-nth(v1, 1i) i<= l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using long comparison operator for non-long elements")
};

proc i__cbmc_binop_cmpl_lt(v1, v2) {
        goto [ l-nth(v1, 0i) = "long" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "long" ] blon unde;
  blon: ret := l-nth(v1, 1i) i< l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using long comparison operator for non-long elements")
};

proc i__cbmc_binop_cmpl_ge(v1, v2) {
        goto [ l-nth(v1, 0i) = "long" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "long" ] blon unde;
  blon: ret := not (l-nth(v1, 1i) i< l-nth(v2, 1i));
        return;
  unde: fail[comparison]("Using long comparison operator for non-long elements")
};

proc i__cbmc_binop_cmpl_eq(v1, v2) {
        goto [ l-nth(v1, 0i) = "long" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "long" ] blon unde;
  blon: ret := l-nth(v1, 1i) i< l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using long comparison operator for non-long elements")
};

(* The following is archi-specific *)
proc i__cbmc_binop_cmpu_le(v1, v2) {
        goto [ (l-nth(v1, 0i) = "int") and (l-nth(v2, 0i) = "int") ] bint unde;
  bint: ret := l-nth(v1, 1i) i<= l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Cannot compare non-comparable values")
};

proc i__cbmc_binop_cmpu_gt(v1, v2) {
      ir := "i__cbmc_binop_cmpu_le"(v1, v2);
      ret := not ir;
      return
};

proc i__cbmc_binop_cmpfs_ge(v1, v2) {
        goto [ l-nth(v1, 0i) = "single" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "single" ] blon unde;
  blon: ret := not (l-nth(v1, 1i) < l-nth(v2, 1i));
        return;
  unde: fail[comparison]("Using single comparison operator for non-single elements")
};

proc i__cbmc_binop_cmpfs_le(v1, v2) {
        goto [ l-nth(v1, 0i) = "single" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "single" ] blon unde;
  blon: ret := l-nth(v1, 1i) <= l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using single comparison operator for non-single elements")
};

(* This is archi specific *)
proc i__cbmc_binop_cmpu_eq(v1, v2) {
        goto [ (l-nth(v1, 0i) = "int") and (l-nth(v2, 0i) = "int") ] bint unde;
  bint: ret := l-nth(v1, 1i) = l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Cannot compare non-comparable values")
};

proc i__cbmc_binop_cmpu_ne(v1, v2) {
        ir := "i__cbmc_binop_cmpu_eq"(v1, v2);
        ret := not ir;
        return
};

(* This is archi specific *)
proc i__cbmcbinop_cmplu_eq(v1, v2) {
        goto [ (l-nth(v1, 0i) = "long") and (l-nth(v2, 0i) = "long") ] blon els1;
  blon: ret := l-nth(v1, 1i) = l-nth(v2, 1i);
        return;
  els1: goto [
            (typeOf(l-nth(v1, 0i)) = Obj)
        and (typeOf(l-nth(v2, 0i)) = Obj)
        ] bobj els2; (* tests if both are pointers withing the same block *)
  bobj: goto [ (l-nth(v1, 0i) = l-nth(v2, 0i)) ] smbl dfbl;
  smbl: t1 := "i__weak_valid_ptr"(l-nth(v1, 0i), l-nth(v1, 1i));
        t2 := "i__weak_valid_ptr"(l-nth(v2, 0i), l-nth(v2, 1i));
        goto [ t1 and t2 ] cmpr unde;
  cmpr: ret := l-nth(v1, 1i) = l-nth(v2, 1i);
        return;
  dfbl: t1 := "i__valid_pointer"(l-nth(v1, 0i), l-nth(v1, 1i));
        t2 := "i__valid_pointer"(l-nth(v2, 0i), l-nth(v2, 1i));
        goto [ t1 and t2 ] refl unde;
  els2: goto [ (typeOf(l-nth(v1, 0i)) = Obj) and (l-nth(v2, 0i) = "long") ] lprl els3;
  lprl: v1weak := "i__weak_valid_ptr"(l-nth(v1, 0i), l-nth(v1, 1i));
        goto [ (l-nth(v2, 1i) = 0i) and v1weak ] refl unde;
  els3: goto [ (typeOf(l-nth(v2, 0i)) = Obj) and (l-nth(v1, 0i) = "long") ] llrp unde;
  llrp: v2weak := "i__weak_valid_ptr"(l-nth(v2, 0i), l-nth(v2, 1i));
        goto [ (l-nth(v1, 1i) = 0i) and v2weak ] refl unde; 
  refl: ret := false;
        return;     
  unde: fail[comparison]("Cannot compare non-comparable values")
};


proc i__cbmc_binop_cmplu_ne(v1, v2) {
      ir := "i__cbmc_binop_cmplu_eq"(v1, v2);
      ret := not ir;
      return
};

proc i__cbmc_binop_cmp_gt(v1, v2) {
        goto [ l-nth(v1, 0i) = "int" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "int" ] blon unde;
  blon: ret := l-nth(v1, 1i) i> l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using int comparison operator for non-int elements")
};

proc i__cbmc_binop_cmp_ge(v1, v2) {
        goto [ l-nth(v1, 0i) = "int" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "int" ] blon unde;
  blon: ret := l-nth(v1, 1i) i>= l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using int comparison operator for non-int elements")
};

proc i__cbmc_binop_cmp_le(v1, v2) {
        goto [ l-nth(v1, 0i) = "int" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "int" ] blon unde;
  blon: ret := l-nth(v1, 1i) i<= l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using int comparison operator for non-int elements")
};

proc i__cbmc_binop_cmp_lt(v1, v2) {
        goto [ l-nth(v1, 0i) = "int" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "int" ] blon unde;
  blon: ret := l-nth(v1, 1i) i< l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using int comparison operator for non-int elements")
};

proc i__cbmc_binop_cmp_eq(v1, v2) {
        goto [ l-nth(v1, 0i) = "int" ] llon unde;
  llon: goto [ l-nth(v2, 0i) = "int" ] blon unde;
  blon: ret := l-nth(v1, 1i) = l-nth(v2, 1i);
        return;
  unde: fail[comparison]("Using int comparison operator for non-int elements")
};


proc i__cbmc_binop_cmp_ne(v1, v2) {
        ir := "i__binop_cmp_eq"(v1, v2);
        ret := not ir;
        return
};